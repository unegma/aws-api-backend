{
  "name": "Unegma_ExampleBackend_SendMessage",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "pull-template": "git pull original master --allow-unrelated-histories",
    "test": "tsc; mocha -r esm ./test/index.spec.ts",
    "install-deps": "npm install;",
    "update-install": "npm update; npm install;",
    "compile": "which tsc; tsc",
    "compile-watch": "tsc -w",
    "compile-on-fly": "ts-node ./src/index.ts",
    "1-create-role-AND-GENERATE-ARN": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && aws --profile $AWS_PROFILE iam create-role --role-name $AWS_ROLE_NAME --assume-role-policy-document file:///$PWD/settings/trust_policy.json >> $PWD/settings/log/role-$AWS_ROLE_NAME.log.md",
    "2-attach-policy-to-role": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && aws --profile $AWS_PROFILE iam attach-role-policy --role-name $AWS_ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
    "3-create-lambda": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && eval $(grep '^AWS_ROLE_ARN' .env) && eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^SLACK_ERROR_LOG' .env) && eval $(grep '^SLACK_MESSAGES_LOG' .env) && aws --profile $AWS_PROFILE lambda --region $AWS_REGION create-function --function-name $AWS_FUNCTION_NAME --runtime nodejs16.x --handler index.handler --environment \"Variables={SLACK_MESSAGES_LOG=$SLACK_MESSAGES_LOG,SLACK_ERROR_LOG=$SLACK_ERROR_LOG}\" --timeout 300 --role $AWS_ROLE_ARN --zip-file fileb:///$PWD/settings/blueprint-function.zip >> $PWD/settings/log/lambda-$AWS_FUNCTION_NAME.log.md",
    "3b-update-lambda": "aws lambda update-function-configuration --function-name lambda-example --timeout 5 --memory-size 1024",
    "3c-update-lambda-environment-vars-no-revision-id": "aws lambda update-function-configuration --function-name lambda-example --environment file://environment.json --query \"Environment\"",
    "DEPLOY": "eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && npm run-script compile && bash ../../scripts/publish.sh -f $AWS_FUNCTION_NAME -p $AWS_PROFILE -r $AWS_REGION",
    "live-test": "eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && aws --profile $AWS_PROFILE lambda invoke --function-name $AWS_FUNCTION_NAME --invocation-type RequestResponse --region $AWS_REGION --log-type Tail --cli-binary-format raw-in-base64-out --payload file://tests/testData/notconfigued.json response.json",
    "1-disabled-detach-role-policies": "#eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && aws --profile $AWS_PROFILE iam detach-role-policy --role-name $AWS_ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
    "2-disabled-delete-role": "#eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && aws --profile $AWS_PROFILE iam delete-role --role-name $AWS_ROLE_NAME",
    "3-disabled-delete-lambda": "#eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && aws --profile $AWS_PROFILE lambda --region $AWS_REGION delete-function --function-name $AWS_FUNCTION_NAME",
    "live-test-2": "eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && aws --profile $AWS_PROFILE lambda invoke --function-name $AWS_FUNCTION_NAME --invocation-type RequestResponse --region $AWS_REGION --log-type Tail --cli-binary-format raw-in-base64-out --payload '{\"foo\":\"bar\"}' /dev/null",
    "1-create-rest-api-resource-v2": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_NAME' .env) && eval $(grep '^AWS_FUNCTION_ARN' .env) && aws --profile $AWS_PROFILE --region $AWS_REGION apigatewayv2 create-api --name $AWS_API_NAME --protocol-type HTTP --target $AWS_FUNCTION_ARN >> $PWD/settings/log/api-$AWS_API_NAME.log.md",
    "2-get-api-integrations": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE --region $AWS_REGION apigatewayv2 get-integrations --api-id $AWS_API_ID >> $PWD/settings/log/api-integrations-$AWS_API_ID.log.md",
    "3-create-route-v2": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_NAME' .env) && eval $(grep '^AWS_INTEGRATION_ID' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE --region $AWS_REGION apigatewayv2 create-route --api-id $AWS_API_ID --route-key 'GET /examples' --target integrations/$AWS_INTEGRATION_ID >> $PWD/settings/log/api-$AWS_API_NAME-integration-$AWS_INTEGRATION_ID-routes.log.md" ,
    "4-get-account-id": "eval $(grep '^AWS_PROFILE' .env) && aws --profile $AWS_PROFILE sts get-caller-identity >> $PWD/settings/log/account-details.log.md",
    "5-add-permission": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_NAME' .env) && eval $(grep '^AWS_FUNCTION_ARN' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE --region $AWS_REGION lambda add-permission --statement-id api-invoke-lambda --action lambda:InvokeFunction --function-name $AWS_FUNCTION_ARN --principal apigateway.amazonaws.com --source-arn \"arn:aws:execute-api:$AWS_REGION:$AWS_ACCOUNT_ID:$AWS_API_ID/*\"",
    "6-get-api-endpoint": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE --region $AWS_REGION apigatewayv2 get-api --api-id $AWS_API_ID >> $PWD/settings/log/api-endpoint-$AWS_API_ID.log.md",
    "live-test-3": "curl -X $THE_API_ENDPOINT/examples",
    "1-TODO-REMOVEME-create-rest-api-resource": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_NAME' .env) && aws --profile $AWS_PROFILE apigateway --region $AWS_REGION create-rest-api --name $AWS_API_NAME --endpoint-configuration '{\"types\": [\"REGIONAL\"]}' >> $PWD/settings/log/api-$AWS_API_NAME.log.md",
    "2-TODO-REMOVEME-get-api-root-resource-id": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE apigateway --region $AWS_REGION get-resources --rest-api-id $AWS_API_ID >> $PWD/settings/log/api-id-$AWS_API_ID.log.md",
    "3-TODO-REMOVEME-create-method": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && eval $(grep '^AWS_ROOT_RESOURCE_ID' .env) && aws --profile $AWS_PROFILE apigateway --region $AWS_REGION put-method --rest-api-id $AWS_API_ID --resource-id $AWS_ROOT_RESOURCE_ID --http-method GET --authorization-type NONE --no-api-key-required",
    "4-TODO-REMOVEME-create-method-response": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && eval $(grep '^AWS_ROOT_RESOURCE_ID' .env) && aws --profile $AWS_PROFILE apigateway --region $AWS_REGION put-method-response --rest-api-id $AWS_API_ID --resource-id $AWS_ROOT_RESOURCE_ID --http-method GET --status-code 200 --response-models \"{\\\"application/json\\\": \\\"Empty\\\"}\"",
    "5-TODO-REMOVEME-connect-api-to-lambda": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && eval $(grep '^AWS_ROOT_RESOURCE_ID' .env)  && eval $(grep '^AWS_FUNCTION_ARN' .env) && aws --profile $AWS_PROFILE apigateway --region $AWS_REGION put-integration --rest-api-id $AWS_API_ID --resource-id $AWS_ROOT_RESOURCE_ID --type AWS --http-method GET --integration-http-method POST --uri \"arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/arn:aws:lambda:$AWS_REGION:11111111:function:sree-py1/invocations\"",
    "1-TODO-REMOVEME-disabled-delete-rest-api-resource": "#eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE apigateway --region $AWS_REGION delete-rest-api --rest-api-id $AWS_API_ID",
    "1-disabled-delete-http-api-route": "#eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE apigatewayv2 --region $AWS_REGION delete-route --route-id $THE_ROUTE_ID",
    "2-disabled-delete-http-api": "#eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_API_ID' .env) && aws --profile $AWS_PROFILE apigatewayv2 --region $AWS_REGION delete-api --api-id $AWS_API_ID"
  },
  "devDependencies": {
    "@types/aws-lambda": "^8.10.83",
    "@types/jest": "^27.0.1",
    "@types/mocha": "^9.0.0",
    "@types/node": "^14.15.5",
    "chai": "^4.2.0",
    "esm": "^3.2.25",
    "lambda-tester": "^4.0.1",
    "mocha": "^8.1.3",
    "proxyquire": "^2.1.3",
    "sinon": "^9.2.1",
    "sinon-chai": "^3.5.0",
    "typescript": "^4.4.3"
  },
  "dependencies": {
    "@unegma/aws-utilities": "^1.20.19",
    "@unegma/logger": "^1.5.21",
    "@unegma/utilities": "^1.3.2",
    "aws-sdk": "^2.780.0",
    "axios": "^0.21.4",
    "dotenv": "^8.2.0",
    "googleapis": "^105.0.0",
    "node-fetch": "^2.6.1",
    "rarible-sdk": "^1.9.9",
    "web3": "^1.3.4"
  }
}
