{
  "name": "Unegma_ExampleBackend_SendMessage",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "pull-template": "git pull original master --allow-unrelated-histories",
    "test": "tsc; mocha -r esm ./test/index.spec.ts",
    "install-deps": "npm install;",
    "update-install": "npm update; npm install;",
    "compile": "which tsc; tsc",
    "compile-watch": "tsc -w",
    "compile-on-fly": "ts-node ./src/index.ts",
    "1-create-role-AND-GENERATE-ARN": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && aws --profile $AWS_PROFILE iam create-role --role-name $AWS_ROLE_NAME --assume-role-policy-document file:///$PWD/settings/trust_policy.json",
    "2-attach-policy-to-role": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && aws --profile $AWS_PROFILE iam attach-role-policy --role-name $AWS_ROLE_NAME --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
    "3-create-lambda": "eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && eval $(grep '^AWS_ROLE_NAME' .env) && eval $(grep '^AWS_ROLE_ARN' .env) && eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^SLACK_ERROR_LOG' .env) && eval $(grep '^SLACK_MESSAGES_LOG' .env) && aws --profile $AWS_PROFILE lambda --region $AWS_REGION create-function --function-name $AWS_FUNCTION_NAME --runtime nodejs16.x --handler index.handler --environment \"Variables={SLACK_MESSAGES_LOG=$SLACK_MESSAGES_LOG,SLACK_ERROR_LOG=$SLACK_ERROR_LOG}\" --timeout 300 --role $AWS_ROLE_ARN --zip-file fileb:///$PWD/settings/blueprint-function.zip",
    "3b-update-lambda": "aws lambda update-function-configuration --function-name lambda-example --timeout 5 --memory-size 1024",
    "DEPLOY": "eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && npm run-script compile && bash ../../scripts/publish.sh -f $AWS_FUNCTION_NAME -p $AWS_PROFILE -r $AWS_REGION",
    "live-test": "eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && aws --profile $AWS_PROFILE lambda invoke --function-name $AWS_FUNCTION_NAME --invocation-type RequestResponse --region $AWS_REGION --log-type Tail --cli-binary-format raw-in-base64-out --payload file://tests/testData/notconfigued.json response.json",
    "live-test-2": "eval $(grep '^AWS_FUNCTION_NAME' .env) && eval $(grep '^AWS_PROFILE' .env) && eval $(grep '^AWS_REGION' .env) && aws --profile $AWS_PROFILE lambda invoke --function-name $AWS_FUNCTION_NAME --invocation-type RequestResponse --region $AWS_REGION --log-type Tail --cli-binary-format raw-in-base64-out --payload $(echo '{\"username\": \"tc\"}' | base64) /dev/null"
  },
  "devDependencies": {
    "@types/aws-lambda": "^8.10.83",
    "@types/jest": "^27.0.1",
    "@types/mocha": "^9.0.0",
    "@types/node": "^14.15.5",
    "chai": "^4.2.0",
    "esm": "^3.2.25",
    "lambda-tester": "^4.0.1",
    "mocha": "^8.1.3",
    "proxyquire": "^2.1.3",
    "sinon": "^9.2.1",
    "sinon-chai": "^3.5.0",
    "typescript": "^4.4.3"
  },
  "dependencies": {
    "@unegma/aws-utilities": "^1.20.19",
    "@unegma/logger": "^1.5.21",
    "@unegma/utilities": "^1.3.2",
    "aws-sdk": "^2.780.0",
    "axios": "^0.21.4",
    "dotenv": "^8.2.0",
    "googleapis": "^105.0.0",
    "node-fetch": "^2.6.1",
    "rarible-sdk": "^1.9.9",
    "web3": "^1.3.4"
  }
}
